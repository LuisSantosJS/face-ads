import Head from "next/head";
import { useState } from "react";
//@ts-ignore
import cookieCutter from "cookie-cutter";
import axios from "axios";
interface IData {
  name: string;
  id: string;
}
export default function Login() {
  const [loading, setLoading] = useState(false);
  const [token, setToken] = useState("");
  const [accountId, setAccountId] = useState("");
  const [step, setStep] = useState(0);
  const [data, setData] = useState<IData[]>([]);
  const onSubmit = () => {
    if (step == 0) {
      if (token.length == 0) return;
      return loadBMS();
    }
    setLoading(true);
    const data = Buffer.from(
      JSON.stringify({
        token,
        accountId,
      })
    ).toString("base64");
    cookieCutter.set("@userData", data, {
      path: "/",
      expires: new Date(new Date().getTime() + 60 * 60 * 24 * 1000),
    });
    window.location.replace("/");
  };
  const loadBMS = async () => {
    setLoading(true);
    const response = await axios.get("/api/accounts", {
      headers: {
        token,
      },
    });
    if (response.data.result.length > 0) {
      setStep(1);
      setData(
        response.data.result.map((e: any) => ({
          ...e,
          id: e.id.split("act_")[1],
        }))
      );
      setAccountId(response.data.result[0].id.split("act_")[1]);
    }

    setLoading(false);
  };
  return (
    <>
      <Head>
        <title>Login</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="main-app">
        <div style={{ backgroundColor: "white", overflow:"auto", }} className="main-white-box">
          <h3  style={{paddingTop: 80}} className="loginName">
            {step == 0
              ? "Insira seu access token"
              : "Selecione sua conta de an√∫ncios"}
          </h3>

          {step == 0 && (
            <input
              className="inputLogin"
              name="Access token"
              value={token}
              onChange={(e) => setToken(e.target.value)}
              type={"text"}
              placeholder="Access token"
            />
          )}
          {step == 1 &&
            data?.map((res) => {
              return (
                <>
                  <span
                    onClick={() => setAccountId(res.id)}
                    className="inputLogin"
                    style={{
                      borderWidth: "0.1px",
                      border: "solid",
                      borderRadius: 10,
                      cursor: "pointer",
                      padding: 4,
                      paddingLeft: 8,
                      backgroundColor:
                        accountId == res.id ? "#bababa" : "transparent",
                    }}
                    contentEditable={false}
                  >
                    {res.name}
                  </span>
                </>
              );
            })}

          <button style={{marginBottom: 20}} onClick={onSubmit} disabled={loading} className="buttonLogin">
            {step == 0 ? "Continuar" : "Accesar"}
          </button>
        </div>
        <div
          style={{ display: loading ? "flex" : "none" }}
          className={"loader"}
        />
      </main>
    </>
  );
}
